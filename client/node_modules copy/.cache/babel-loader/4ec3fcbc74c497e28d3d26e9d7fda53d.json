{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jrowdy\\\\desktop\\\\Motivate-Me\\\\client\\\\src\\\\components\\\\quotesList.js\";\nimport '../pages/Profile/Profile.css';\nimport React, { useEffect, useState } from 'react';\nimport { random } from 'lodash';\nimport 'typeface-roboto';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport QuoteMachine from '../components/QuoteMachine';\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh'\n  }\n};\n\nfunction App({\n  classes\n}) {\n  const [quotes, setQuotes] = useState([]);\n  const [selectedQuoteIndex, setSelectedQuoteIndex] = useState(null);\n  useEffect(async () => {\n    const data = await fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json');\n    const quotes = await data.json();\n    setQuotes(quotes);\n    setSelectedQuoteIndex(random(0, quotes.length - 1));\n  }, []);\n\n  function getSelectedQuote() {\n    if (!quotes.length || !Number.isInteger(selectedQuoteIndex)) {\n      return undefined;\n    }\n\n    return quotes[selectedQuoteIndex];\n  }\n  /**\n   * Returns an integer representing an index in state.quotes\n   * If state.quotes is empty, returns undefined\n   */\n\n\n  function generateNewQuoteIndex() {\n    if (!quotes.length) {\n      return undefined;\n    }\n\n    return random(0, quotes.length - 1);\n  }\n\n  function assignNewQuoteIndex() {\n    setSelectedQuoteIndex(generateNewQuoteIndex());\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    className: classes.container,\n    id: \"quote-box\",\n    justify: \"center\",\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    xs: 11,\n    lg: 8,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, getSelectedQuote() ? /*#__PURE__*/React.createElement(QuoteMachine, {\n    selectedQuote: getSelectedQuote(),\n    assignNewQuoteIndex: assignNewQuoteIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }) : null));\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["C:/Users/jrowdy/desktop/Motivate-Me/client/src/components/quotesList.js"],"names":["React","useEffect","useState","random","Grid","withStyles","QuoteMachine","styles","container","alignItems","display","height","App","classes","quotes","setQuotes","selectedQuoteIndex","setSelectedQuoteIndex","data","fetch","json","length","getSelectedQuote","Number","isInteger","undefined","generateNewQuoteIndex","assignNewQuoteIndex"],"mappings":";AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,iBAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,OAAO,EAAE,MAFA;AAGTC,IAAAA,MAAM,EAAE;AAHC;AADE,CAAf;;AAQA,SAASC,GAAT,CAAa;AAAEC,EAAAA;AAAF,CAAb,EAA0B;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,kBAAD,EAAqBC,qBAArB,IAA8Cf,QAAQ,CAAC,IAAD,CAA5D;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMiB,IAAI,GAAG,MAAMC,KAAK,CAAC,uIAAD,CAAxB;AACA,UAAML,MAAM,GAAG,MAAMI,IAAI,CAACE,IAAL,EAArB;AACAL,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,IAAAA,qBAAqB,CAACd,MAAM,CAAC,CAAD,EAAIW,MAAM,CAACO,MAAP,GAAgB,CAApB,CAAP,CAArB;AACD,GALQ,EAKN,EALM,CAAT;;AAOA,WAASC,gBAAT,GAA4B;AAC1B,QAAI,CAACR,MAAM,CAACO,MAAR,IAAkB,CAACE,MAAM,CAACC,SAAP,CAAiBR,kBAAjB,CAAvB,EAA6D;AAC3D,aAAOS,SAAP;AACD;;AACD,WAAOX,MAAM,CAACE,kBAAD,CAAb;AACD;AAED;;;;;;AAIA,WAASU,qBAAT,GAAiC;AAC/B,QAAI,CAACZ,MAAM,CAACO,MAAZ,EAAoB;AAClB,aAAOI,SAAP;AACD;;AACD,WAAOtB,MAAM,CAAC,CAAD,EAAIW,MAAM,CAACO,MAAP,GAAgB,CAApB,CAAb;AACD;;AAED,WAASM,mBAAT,GAA+B;AAC7BV,IAAAA,qBAAqB,CAACS,qBAAqB,EAAtB,CAArB;AACD;;AAED,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEb,OAAO,CAACL,SAAzB;AAAoC,IAAA,EAAE,EAAC,WAAvC;AAAmD,IAAA,OAAO,EAAC,QAA3D;AAAoE,IAAA,SAAS,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,EAAV;AAAc,IAAA,EAAE,EAAE,CAAlB;AAAqB,IAAA,IAAI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIc,gBAAgB,kBAChB,oBAAC,YAAD;AAAc,IAAA,aAAa,EAAEA,gBAAgB,EAA7C;AAAiD,IAAA,mBAAmB,EAAEK,mBAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GAEhB,IAJJ,CADF,CADF;AAWD;;AAED,eAAetB,UAAU,CAACE,MAAD,CAAV,CAAmBK,GAAnB,CAAf","sourcesContent":["import '../pages/Profile/Profile.css';\nimport React, { useEffect, useState } from 'react';\nimport { random } from 'lodash';\nimport 'typeface-roboto';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport QuoteMachine from '../components/QuoteMachine';\n\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh',\n  }\n};\n\nfunction App({ classes }) {\n  const [quotes, setQuotes] = useState([]);\n  const [selectedQuoteIndex, setSelectedQuoteIndex] = useState(null);\n\n  useEffect(async () => {\n    const data = await fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json');\n    const quotes = await data.json();\n    setQuotes(quotes);\n    setSelectedQuoteIndex(random(0, quotes.length - 1));\n  }, []);\n\n  function getSelectedQuote() {\n    if (!quotes.length || !Number.isInteger(selectedQuoteIndex)) {\n      return undefined;\n    }\n    return quotes[selectedQuoteIndex];\n  }\n\n  /**\n   * Returns an integer representing an index in state.quotes\n   * If state.quotes is empty, returns undefined\n   */\n  function generateNewQuoteIndex() {\n    if (!quotes.length) {\n      return undefined;\n    }\n    return random(0, quotes.length - 1);\n  }\n\n  function assignNewQuoteIndex() {\n    setSelectedQuoteIndex(generateNewQuoteIndex());\n  }\n\n  return (\n    <Grid className={classes.container} id=\"quote-box\" justify=\"center\" container>\n      <Grid xs={11} lg={8} item>\n        {\n          getSelectedQuote() ?\n          <QuoteMachine selectedQuote={getSelectedQuote()} assignNewQuoteIndex={assignNewQuoteIndex} /> :\n          null\n        }\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}